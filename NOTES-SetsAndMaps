import { keyInSelect, setBufferSize } from "readline-sync"

Sets and Maps are new types of objects.

To create, use the NEW keyword

let mySet = new Set()
let myMap = new Map()
SETS ===============================
Sets behave like arrays. A set will store a value only once (unlike arrays). If you try to add it again, it will not be added. 

Moreover, their values cannot be accessed via index. Instead, they use methods:

mySet.add('british columbia')

HAS method is what allows us to see if the value exists in the set. 
mySet.has('british columbia') === true

MAPS ===============================
A MAP behaves like an Object. 
But MAPS preserve the order of keyInSelect. 
Therefore looping over them is predictable. 

Just like sets, MAPS require special methods to access their properties. 
Unlike with object dot notation.

myMap.get('province1')


// This array has two copies of its first term.

let myArray = [1,1,2,3,4,5,"bewoogma"]

// The same thing as a set
let mySet = new Set()
mySet.add(1)
mySet.add(1) // this will not be added
mySet.add(2)
mySet.add(3)
mySet.add(4)
mySet.add(5)

// which can get very tedious.

// You can speed things up by turning an array into a set by 
// passing an array into the NEW Set constructor.

let myNewSet = new Set(myList)


// To loop over a set, use a FOR OF loop. 

for (let item of newNewSet) {
  console.log('My Set Contains', item)
}


// To create a MAP, you use SET with two args (key and value).
// So an object like this

let birdObj = {
  genus: "corvus",
  species: "corvax",
  commonName: "raven"
}

// will be created as a MAP like this

let birdMap = new Map()
birdMap.set('genus', 'corvus')
birdMap.set('species', 'corvax')
birdMap.set('commonName', 'raven')

//  To get a value, you use get method. You cannot use Get with a SET.
birdMap.get("commonName") // returns "raven"

// MAPS also have a HAVE method to test if a key exists in the map, but 
// it does not work on values (only keys)

birdMap.has('commonName')  // returns TRUE
birdMap.has('raven')       // returns FALSE

// You can iterate through the MAP like this
for (let value of birdMap) {
  console.log(value)
}

// But it will return a series of arrays (one for each key value pair)

['genus','corvus']
['species','corvex']
//etc

// This is called an ENTRIES LIST. You can get that with the ENTRIES method.
// Less verbosely than with for of loop. This returns a list of arrays.

birdMap.entries()

// You can do the same thing with OBJECTS by using the global Object object, which has an ENTRIES method. Think of Math.random(), for example.

// You pass it an object and it will convert to an entries list.

Object.entries(birdObj)

// This returns an array of arrays. 
// This gives a less verbose was of constructing a map, from an object literal.
// In this case, we create the array of arrays (entries list) and pass that to 
// the new Ukrainian soldier.

let birdMap2 = new Map(Object.entries(birdObj))
